{"ast":null,"code":"import { startOfDay, endOfDay, subDays, addDays, endOfMonth, isSameDay, isSameMonth, addHours } from 'date-fns';\nimport { CalendarView } from 'angular-calendar';\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared-modal/shared-modal-factory.service\";\nconst colors = {\n  red: {\n    primary: '#ad2121',\n    secondary: '#FAE3E3'\n  },\n  blue: {\n    primary: '#1e90ff',\n    secondary: '#D1E8FF'\n  },\n  yellow: {\n    primary: '#e3bc08',\n    secondary: '#FDF1BA'\n  }\n};\nexport class SharedCalendarService {\n  constructor(dialogFactoryService, cd) {\n    this.dialogFactoryService = dialogFactoryService;\n    this.cd = cd;\n    this.actions = [{\n      label: '<i class=\"fa fa-pencil-square-o\"></i>',\n      a11yLabel: 'Edit',\n      onClick: ({\n        event\n      }) => {\n        this.handleEvent('Edited', event, null);\n      }\n    }, {\n      label: '<i class=\"fa fa-trash-o\"></i>',\n      a11yLabel: 'Delete',\n      onClick: ({\n        event\n      }) => {\n        this.events = this.events.filter(iEvent => iEvent !== event);\n        this.handleEvent('Deleted', event, null);\n      }\n    }];\n    this.view = CalendarView.Month;\n    this.CalendarView = CalendarView;\n    this.viewDate = new Date();\n    this.refresh = new Subject();\n    this.events = this.getEvents();\n    this.activeDayIsOpen = true;\n  }\n  closeDialog() {\n    this.dialog.close();\n  }\n  openDialog(dialogData) {\n    this.dialog = this.dialogFactoryService.open(dialogData);\n  }\n  dayClicked({\n    date,\n    events\n  }) {\n    if (isSameMonth(date, this.viewDate)) {\n      if (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true || events.length === 0) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n      this.viewDate = date;\n    }\n  }\n  eventTimesChanged({\n    event,\n    newStart,\n    newEnd\n  }) {\n    this.events = this.events.map(iEvent => {\n      if (iEvent === event) {\n        return {\n          ...event,\n          start: newStart,\n          end: newEnd\n        };\n      }\n      return iEvent;\n    });\n    // this.handleEvent('Dropped or resized', event, null);\n  }\n\n  handleEvent(action, event, userDialogTemplate) {\n    this.modalData = {\n      event,\n      action\n    };\n    let data = {\n      headerText: 'teste',\n      template: userDialogTemplate\n    };\n    this.openDialog(data);\n  }\n  addEvent() {\n    this.events = [...this.events, {\n      title: 'New event',\n      start: startOfDay(new Date()),\n      end: endOfDay(new Date()),\n      color: colors['red'],\n      draggable: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      }\n    }];\n  }\n  getEvents() {\n    return [{\n      start: subDays(startOfDay(new Date()), 1),\n      end: addDays(new Date(), 1),\n      title: 'A 3 day event',\n      color: {\n        ...colors['red']\n      },\n      actions: this.actions,\n      allDay: true,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      },\n      draggable: true\n    }, {\n      start: startOfDay(new Date()),\n      title: 'An event with no end date',\n      color: {\n        ...colors['yellow']\n      },\n      actions: this.actions\n    }, {\n      start: subDays(endOfMonth(new Date()), 3),\n      end: addDays(endOfMonth(new Date()), 3),\n      title: 'A long event that spans 2 months',\n      color: {\n        ...colors['blue']\n      },\n      allDay: true\n    }, {\n      start: addHours(startOfDay(new Date()), 2),\n      end: addHours(new Date(), 2),\n      title: 'A draggable and resizable event',\n      color: {\n        ...colors['yellow']\n      },\n      actions: this.actions,\n      resizable: {\n        beforeStart: true,\n        afterEnd: true\n      },\n      draggable: true\n    }];\n  }\n  deleteEvent(eventToDelete) {\n    this.events = this.events.filter(event => event !== eventToDelete);\n  }\n  setView(view) {\n    this.view = view;\n  }\n  closeOpenMonthViewDay() {\n    this.activeDayIsOpen = false;\n  }\n}\nSharedCalendarService.ɵfac = function SharedCalendarService_Factory(t) {\n  return new (t || SharedCalendarService)(i0.ɵɵinject(i1.ModalFactoryService), i0.ɵɵinject(i0.ChangeDetectorRef));\n};\nSharedCalendarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SharedCalendarService,\n  factory: SharedCalendarService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SACIA,UAAU,EACVC,QAAQ,EACRC,OAAO,EACPC,OAAO,EACPC,UAAU,EACVC,SAAS,EACTC,WAAW,EACXC,QAAQ,QACL,UAAU;AACjB,SAIIC,YAAY,QACT,kBAAkB;AAEzB,SAASC,OAAO,QAAQ,MAAM;;;AAM9B,MAAMC,MAAM,GAA+B;EACvCC,GAAG,EAAE;IACDC,OAAO,EAAE,SAAS;IAClBC,SAAS,EAAE;GACd;EACDC,IAAI,EAAE;IACFF,OAAO,EAAE,SAAS;IAClBC,SAAS,EAAE;GACd;EACDE,MAAM,EAAE;IACJH,OAAO,EAAE,SAAS;IAClBC,SAAS,EAAE;;CAElB;AAID,OAAM,MAAOG,qBAAqB;EA0C9BC,YACYC,oBAAyC,EAC1CC,EAAqB;IADpB,yBAAoB,GAApBD,oBAAoB;IACrB,OAAE,GAAFC,EAAE;IAzCb,YAAO,GAA0B,CAC7B;MACIC,KAAK,EAAE,uCAAuC;MAC9CC,SAAS,EAAE,MAAM;MACjBC,OAAO,EAAE,CAAC;QAAEC;MAAK,CAA4B,KAAU;QACnD,IAAI,CAACC,WAAW,CAAC,QAAQ,EAAED,KAAK,EAAE,IAAI,CAAC;MAC3C;KACH,EACD;MACIH,KAAK,EAAE,+BAA+B;MACtCC,SAAS,EAAE,QAAQ;MACnBC,OAAO,EAAE,CAAC;QAAEC;MAAK,CAA4B,KAAU;QACnD,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,MAAM,CAAEC,MAAM,IAAKA,MAAM,KAAKJ,KAAK,CAAC;QAC9D,IAAI,CAACC,WAAW,CAAC,SAAS,EAAED,KAAK,EAAE,IAAI,CAAC;MAC5C;KACH,CACJ;IAED,SAAI,GAAiBf,YAAY,CAACoB,KAAK;IAEvC,iBAAY,GAAGpB,YAAY;IAE3B,aAAQ,GAAS,IAAIqB,IAAI,EAAE;IAO3B,YAAO,GAAG,IAAIpB,OAAO,EAAQ;IAE7B,WAAM,GAAoB,IAAI,CAACqB,SAAS,EAAE;IAE1C,oBAAe,GAAY,IAAI;EAU/B;EAGAC,WAAW;IACP,IAAI,CAACC,MAAM,CAACC,KAAK,EAAE;EACvB;EAEQC,UAAU,CAACC,UAAqB;IACpC,IAAI,CAACH,MAAM,GAAG,IAAI,CAACd,oBAAoB,CAACkB,IAAI,CAACD,UAAU,CAAC;EAC5D;EAGAE,UAAU,CAAC;IAAEC,IAAI;IAAEb;EAAM,CAA2C;IAChE,IAAInB,WAAW,CAACgC,IAAI,EAAE,IAAI,CAACC,QAAQ,CAAC,EAAE;MAClC,IACKlC,SAAS,CAAC,IAAI,CAACkC,QAAQ,EAAED,IAAI,CAAC,IAAI,IAAI,CAACE,eAAe,KAAK,IAAI,IAChEf,MAAM,CAACgB,MAAM,KAAK,CAAC,EACrB;QACE,IAAI,CAACD,eAAe,GAAG,KAAK;OAC/B,MAAM;QACH,IAAI,CAACA,eAAe,GAAG,IAAI;;MAE/B,IAAI,CAACD,QAAQ,GAAGD,IAAI;;EAE5B;EAEAI,iBAAiB,CAAC;IACdnB,KAAK;IACLoB,QAAQ;IACRC;EAAM,CACuB;IAC7B,IAAI,CAACnB,MAAM,GAAG,IAAI,CAACA,MAAM,CAACoB,GAAG,CAAElB,MAAM,IAAI;MACrC,IAAIA,MAAM,KAAKJ,KAAK,EAAE;QAClB,OAAO;UACH,GAAGA,KAAK;UACRuB,KAAK,EAAEH,QAAQ;UACfI,GAAG,EAAEH;SACR;;MAEL,OAAOjB,MAAM;IACjB,CAAC,CAAC;IACF;EACJ;;EAEAH,WAAW,CAACwB,MAAc,EAAEzB,KAAoB,EAAE0B,kBAA2C;IACzF,IAAI,CAACC,SAAS,GAAG;MAAE3B,KAAK;MAAEyB;IAAM,CAAE;IAClC,IAAIG,IAAI,GAAQ;MAAEC,UAAU,EAAE,OAAO;MAAEC,QAAQ,EAAEJ;IAAkB,CAAE;IACrE,IAAI,CAACf,UAAU,CAACiB,IAAI,CAAC;EACzB;EAEAG,QAAQ;IACJ,IAAI,CAAC7B,MAAM,GAAG,CACV,GAAG,IAAI,CAACA,MAAM,EACd;MACI8B,KAAK,EAAE,WAAW;MAClBT,KAAK,EAAE9C,UAAU,CAAC,IAAI6B,IAAI,EAAE,CAAC;MAC7BkB,GAAG,EAAE9C,QAAQ,CAAC,IAAI4B,IAAI,EAAE,CAAC;MACzB2B,KAAK,EAAE9C,MAAM,CAAC,KAAK,CAAC;MACpB+C,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE;QACPC,WAAW,EAAE,IAAI;QACjBC,QAAQ,EAAE;;KAEjB,CACJ;EACL;EAGA9B,SAAS;IACL,OAAO,CAAC;MACJgB,KAAK,EAAE5C,OAAO,CAACF,UAAU,CAAC,IAAI6B,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;MACzCkB,GAAG,EAAE5C,OAAO,CAAC,IAAI0B,IAAI,EAAE,EAAE,CAAC,CAAC;MAC3B0B,KAAK,EAAE,eAAe;MACtBC,KAAK,EAAE;QAAE,GAAG9C,MAAM,CAAC,KAAK;MAAC,CAAE;MAC3BmD,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,MAAM,EAAE,IAAI;MACZJ,SAAS,EAAE;QACPC,WAAW,EAAE,IAAI;QACjBC,QAAQ,EAAE;OACb;MACDH,SAAS,EAAE;KACd,EACD;MACIX,KAAK,EAAE9C,UAAU,CAAC,IAAI6B,IAAI,EAAE,CAAC;MAC7B0B,KAAK,EAAE,2BAA2B;MAClCC,KAAK,EAAE;QAAE,GAAG9C,MAAM,CAAC,QAAQ;MAAC,CAAE;MAC9BmD,OAAO,EAAE,IAAI,CAACA;KACjB,EACD;MACIf,KAAK,EAAE5C,OAAO,CAACE,UAAU,CAAC,IAAIyB,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;MACzCkB,GAAG,EAAE5C,OAAO,CAACC,UAAU,CAAC,IAAIyB,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;MACvC0B,KAAK,EAAE,kCAAkC;MACzCC,KAAK,EAAE;QAAE,GAAG9C,MAAM,CAAC,MAAM;MAAC,CAAE;MAC5BoD,MAAM,EAAE;KACX,EACD;MACIhB,KAAK,EAAEvC,QAAQ,CAACP,UAAU,CAAC,IAAI6B,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1CkB,GAAG,EAAExC,QAAQ,CAAC,IAAIsB,IAAI,EAAE,EAAE,CAAC,CAAC;MAC5B0B,KAAK,EAAE,iCAAiC;MACxCC,KAAK,EAAE;QAAE,GAAG9C,MAAM,CAAC,QAAQ;MAAC,CAAE;MAC9BmD,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBH,SAAS,EAAE;QACPC,WAAW,EAAE,IAAI;QACjBC,QAAQ,EAAE;OACb;MACDH,SAAS,EAAE;KACd,CAAE;EACP;EAEAM,WAAW,CAACC,aAA4B;IACpC,IAAI,CAACvC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,MAAM,CAAEH,KAAK,IAAKA,KAAK,KAAKyC,aAAa,CAAC;EACxE;EAEAC,OAAO,CAACC,IAAkB;IACtB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EAEAC,qBAAqB;IACjB,IAAI,CAAC3B,eAAe,GAAG,KAAK;EAChC;;AArKSxB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAoD,SAArBpD,qBAAqB;AAAA","names":["startOfDay","endOfDay","subDays","addDays","endOfMonth","isSameDay","isSameMonth","addHours","CalendarView","Subject","colors","red","primary","secondary","blue","yellow","SharedCalendarService","constructor","dialogFactoryService","cd","label","a11yLabel","onClick","event","handleEvent","events","filter","iEvent","Month","Date","getEvents","closeDialog","dialog","close","openDialog","dialogData","open","dayClicked","date","viewDate","activeDayIsOpen","length","eventTimesChanged","newStart","newEnd","map","start","end","action","userDialogTemplate","modalData","data","headerText","template","addEvent","title","color","draggable","resizable","beforeStart","afterEnd","actions","allDay","deleteEvent","eventToDelete","setView","view","closeOpenMonthViewDay","factory"],"sourceRoot":"","sources":["C:\\Users\\Erik\\Documents\\Projetos\\ng-scheduler\\src\\app\\shared\\components\\shared-calendar\\shared-calendar.service.ts"],"sourcesContent":["import { ChangeDetectorRef, Injectable, TemplateRef, ViewChild } from \"@angular/core\";\r\nimport {\r\n    startOfDay,\r\n    endOfDay,\r\n    subDays,\r\n    addDays,\r\n    endOfMonth,\r\n    isSameDay,\r\n    isSameMonth,\r\n    addHours,\r\n} from 'date-fns';\r\nimport {\r\n    CalendarEvent,\r\n    CalendarEventAction,\r\n    CalendarEventTimesChangedEvent,\r\n    CalendarView,\r\n} from 'angular-calendar';\r\nimport { EventColor } from 'calendar-utils';\r\nimport { Subject } from \"rxjs\";\r\nimport { ModalService } from '../shared-modal/shared-modal.service';\r\nimport { ModalFactoryService } from '../shared-modal/shared-modal-factory.service';\r\nimport { ModalData } from '../shared-modal/model/shared-modal.model';\r\n\r\n\r\nconst colors: Record<string, EventColor> = {\r\n    red: {\r\n        primary: '#ad2121',\r\n        secondary: '#FAE3E3',\r\n    },\r\n    blue: {\r\n        primary: '#1e90ff',\r\n        secondary: '#D1E8FF',\r\n    },\r\n    yellow: {\r\n        primary: '#e3bc08',\r\n        secondary: '#FDF1BA',\r\n    },\r\n};\r\n\r\n\r\n@Injectable()\r\nexport class SharedCalendarService {\r\n\r\n\r\n    actions: CalendarEventAction[] = [\r\n        {\r\n            label: '<i class=\"fa fa-pencil-square-o\"></i>',\r\n            a11yLabel: 'Edit',\r\n            onClick: ({ event }: { event: CalendarEvent }): void => {\r\n                this.handleEvent('Edited', event, null);\r\n            },\r\n        },\r\n        {\r\n            label: '<i class=\"fa fa-trash-o\"></i>',\r\n            a11yLabel: 'Delete',\r\n            onClick: ({ event }: { event: CalendarEvent }): void => {\r\n                this.events = this.events.filter((iEvent) => iEvent !== event);\r\n                this.handleEvent('Deleted', event, null);\r\n            },\r\n        },\r\n    ];\r\n\r\n    view: CalendarView = CalendarView.Month;\r\n\r\n    CalendarView = CalendarView;\r\n\r\n    viewDate: Date = new Date();\r\n\r\n    modalData?: {\r\n        action: string;\r\n        event: CalendarEvent;\r\n    };\r\n\r\n    refresh = new Subject<void>();\r\n\r\n    events: CalendarEvent[] = this.getEvents();\r\n\r\n    activeDayIsOpen: boolean = true;\r\n\r\n    dialog: ModalService | any;\r\n    @ViewChild(\"userDialogTemplate\")\r\n    userDialogTemplate: TemplateRef<any> | any;\r\n\r\n    constructor(\r\n        private dialogFactoryService: ModalFactoryService,\r\n        public cd: ChangeDetectorRef,\r\n    ) {\r\n    }\r\n\r\n\r\n    closeDialog() {\r\n        this.dialog.close();\r\n    }\r\n\r\n    private openDialog(dialogData: ModalData): void {\r\n        this.dialog = this.dialogFactoryService.open(dialogData);\r\n    }\r\n\r\n\r\n    dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\r\n        if (isSameMonth(date, this.viewDate)) {\r\n            if (\r\n                (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\r\n                events.length === 0\r\n            ) {\r\n                this.activeDayIsOpen = false;\r\n            } else {\r\n                this.activeDayIsOpen = true;\r\n            }\r\n            this.viewDate = date;\r\n        }\r\n    }\r\n\r\n    eventTimesChanged({\r\n        event,\r\n        newStart,\r\n        newEnd,\r\n    }: CalendarEventTimesChangedEvent): void {\r\n        this.events = this.events.map((iEvent) => {\r\n            if (iEvent === event) {\r\n                return {\r\n                    ...event,\r\n                    start: newStart,\r\n                    end: newEnd,\r\n                };\r\n            }\r\n            return iEvent;\r\n        });\r\n        // this.handleEvent('Dropped or resized', event, null);\r\n    }\r\n\r\n    handleEvent(action: string, event: CalendarEvent, userDialogTemplate: TemplateRef<any> | null): void {\r\n        this.modalData = { event, action };\r\n        let data: any = { headerText: 'teste', template: userDialogTemplate }\r\n        this.openDialog(data);\r\n    }\r\n\r\n    addEvent(): void {\r\n        this.events = [\r\n            ...this.events,\r\n            {\r\n                title: 'New event',\r\n                start: startOfDay(new Date()),\r\n                end: endOfDay(new Date()),\r\n                color: colors['red'],\r\n                draggable: true,\r\n                resizable: {\r\n                    beforeStart: true,\r\n                    afterEnd: true,\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n\r\n    getEvents() {\r\n        return [{\r\n            start: subDays(startOfDay(new Date()), 1),\r\n            end: addDays(new Date(), 1),\r\n            title: 'A 3 day event',\r\n            color: { ...colors['red'] },\r\n            actions: this.actions,\r\n            allDay: true,\r\n            resizable: {\r\n                beforeStart: true,\r\n                afterEnd: true,\r\n            },\r\n            draggable: true,\r\n        },\r\n        {\r\n            start: startOfDay(new Date()),\r\n            title: 'An event with no end date',\r\n            color: { ...colors['yellow'] },\r\n            actions: this.actions,\r\n        },\r\n        {\r\n            start: subDays(endOfMonth(new Date()), 3),\r\n            end: addDays(endOfMonth(new Date()), 3),\r\n            title: 'A long event that spans 2 months',\r\n            color: { ...colors['blue'] },\r\n            allDay: true,\r\n        },\r\n        {\r\n            start: addHours(startOfDay(new Date()), 2),\r\n            end: addHours(new Date(), 2),\r\n            title: 'A draggable and resizable event',\r\n            color: { ...colors['yellow'] },\r\n            actions: this.actions,\r\n            resizable: {\r\n                beforeStart: true,\r\n                afterEnd: true,\r\n            },\r\n            draggable: true,\r\n        },]\r\n    }\r\n\r\n    deleteEvent(eventToDelete: CalendarEvent) {\r\n        this.events = this.events.filter((event) => event !== eventToDelete);\r\n    }\r\n\r\n    setView(view: CalendarView) {\r\n        this.view = view;\r\n    }\r\n\r\n    closeOpenMonthViewDay() {\r\n        this.activeDayIsOpen = false;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}